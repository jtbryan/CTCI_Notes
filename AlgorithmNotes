# Algorithm Notes

<a href=#python-tricks>Python Tricks</a>

<a href=#bit-manipulation>Bit Manipulation</a>

<a href=#math>Math</a>

<a href=#dynamic-programming>Dynamic programming</a>

<a href=#sorting-and-searching>Sorting and searching</a>


## Python Tricks

Generally, when finding `k` smallest/largest elements, we would use a heap. Well, when it comes to a list of strings we can actually just use the following code to find the `k` most common words:

```python
from collections import Counter

def topKFrequent(self, words: List[str], k: int) -> List[str]:
    counter = Counter(words)
    return [word for word, count in counter.most_common(k)]
```

the `most_common(k)` function actually utilizes a heap and this code runs in `O(nlogk)` time since it must traverse N elements in the initial array, and finding the K most common occurences can be done in log(k) time. 

## Bit Manipulation

In python an example of bit manipulation we can perform in the following:

`Given two binary strings a and b, return their sum as a binary string.`

```
Example 1:

Input: a = "11", b = "1"
Output: "100"
```

A pythonic solution for this would be the following:

```python
def addBinary(self, a: str, b: str) -> str:
        return bin(int(a, 2) + int(b, 2))[2:]
```

`bin`: Returns the string binary representation of an integer (i.e. 0b111) in this case we want to remove the first 2 characters '0b'

`int(var, 2)`: Creates an integer representation of the string in base 2 (i.e. binary representation)

## Math

## Dynamic Programming

good source: https://www.codesdope.com/course/algorithms-dynamic-programming/

Amazing video: https://www.youtube.com/watch?v=oBt53YbR9Kk&t=17700s

Dynamic programming is a way to break down problems into subproblems in order to solve a large problem. While not the only way to do so, these problems are usually solved via recursion. 

A common problem that is usually optimized with dynamic programming is fibonacci calculations. For example, here's the base fibonnaci program:

```python
def fibonacci(n):
  if (n == 0):
    return 0

  if (n == 1):
    return 1

  return fibonacci(n-1) + fibonacci(n-2)
```

However this can be optimized so that never caculate the same values more than once.

For dynamic programming, there are 2 common ways to solve problems, namely <a href=#top-down>top down</a> and <a href=#bottom-up>bottom up</a> (1 small caveat is that bottom up is NOT lways the most optimal choice, and sometimes it's better to use top down):

### Top down

Top down is usually the recursive approach to a dynamic programming problem, and utilizes `memoization` to minimize the number of operations being performed by keeping track of the results. Memoization is typically implemented using recursion and is well-suited for problems that have a relatively small set of inputs.

The top down approach for the fibonacci sequence would look like the following:

```python

def dynamic_fibonacci(n, memo={}):
  if n  in memo: return memo[n]
  if n <= 2: return 1
  memo[n] = dynamic_fibonacci(n-1, memo) + dynamic_fibonacci(n-2, memo)
  return memo[n]
```

this occurs in a "top-down" manner since we are calculating the value at each subproblem along the way

### Bottom up

Bottom up is the reverse of the top down approach, meaning it is performed in an iterative manner  and utilizes `tabulation` to minimize the number of operations being performed by keeping track of the results. Tabulation is typically implemented using iteration and is well-suited for problems that have a large set of inputs

The top down approach for the fibonacci sequence would look like the following:

```python
F = [0]*50 #array to store fibonacci terms

def fibonacci_bottom_up(n):
  F[n] = 0
  F[1] = 1

  for i in range(2, n+1):
    F[i] = F[i-1] + F[i-2]
  return F[n]
```

## Sorting & Searching

### Binary Search

Very common search algorithm. This is used for sorted arrays to find an algorithm in `O(log n)` with `O(1)` space complexity. Here's an example of binary search in Python

```python
    def binary_search(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            
    return -1
```

This can be customized any variety of ways. For example, one customization could be finding a minimum value in a rotated sorted array. This can be seen below:

```python
if len(nums) == 0:
            return -1
        elif len(nums) == 1:
            return nums[0]

        left, right = 0, len(nums) - 1
        
        while left <= right:
            mid = (left + right) // 2
            if nums[mid+1] < nums[mid]:
                return nums[mid+1]
            elif nums[mid] < nums[mid-1]:
                return nums[mid]
            else:
                if nums[right] > nums[mid]:
                    right = mid - 1 
                else:
                    left = mid + 1
                
        return -1
```

### Quick Select

Derived from quick sort, Quick Select is a selection algorithm for `k-th smallest` elements in an `unordered` list. An example of this would look like the following:

```python
# Standard partition process of QuickSort(). 
# It considers the last element as pivot 
# and moves all smaller element to left of 
# it and greater elements to right
def partition(arr, l, r):
      
    x = arr[r]
    i = l
    for j in range(l, r):
          
        if arr[j] <= x:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
              
    arr[i], arr[r] = arr[r], arr[i]
    return i
  
# finds the kth position (of the sorted array) 
# in a given unsorted array i.e this function 
# can be used to find both kth largest and 
# kth smallest element in the array. 
# ASSUMPTION: all elements in arr[] are distinct
def kthSmallest(arr, l, r, k):
  
    # if k is smaller than number of
    # elements in array
    if (k > 0 and k <= r - l + 1):
  
        # Partition the array around last
        # element and get position of pivot
        # element in sorted array
        index = partition(arr, l, r)
  
        # if position is same as k
        if (index - l == k - 1):
            return arr[index]
  
        # If position is more, recur 
        # for left subarray 
        if (index - l > k - 1):
            return kthSmallest(arr, l, index - 1, k)
  
        # Else recur for right subarray 
        return kthSmallest(arr, index + 1, r, 
                            k - index + l - 1)
    print("Index out of bound")
```

### Topological Sort

Good source: https://www.interviewcake.com/concept/java/topological-sort

The topological sort algorithm takes a directed graph and returns an array of the nodes where each node appears before all the nodes it points to.
Here is a visual example:

Directed Graph:

<img src="https://www.interviewcake.com/images/svgs/messy_graph.svg?bust=210">

Topological sort of the graph:

<img src="https://www.interviewcake.com/images/svgs/topologically_sorted_graph.svg?bust=210">

Topological sorts, however, don't work for cyclic graphs. This is because, our first nod ecannot have any incoming directed edges. It MUST have an `indegree` of zero. 

Here is an example of a topological sort in Python using BFS for the <a href=https://leetcode.com/problems/course-schedule-ii/description/>Course Schedule II</a> leetcode problem:

```python
def findOrder(numCourses, prerequisites):
    # create graph and indegree map
    graph = defaultdict(list)
    indegrees = [0] * numCourses
    for a, b in prerequisites:
        graph[b].append(a)
        indegrees[a] += 1

    # perform topological sort using BFS
    # Initialize our queue with the node that has 0 incoming directed edges
    # If there is no node in queue at this point, we have a cyclic graph
    queue = deque([i for i in range(numCourses) if indegrees[i] == 0])
    order = []
    while queue:
        node = queue.popleft()
        order.append(node)
        for neighbor in graph[node]:
            indegrees[neighbor] -= 1
            if indegrees[neighbor] == 0:
                queue.append(neighbor)

    # check if all courses were taken
    if len(order) != numCourses:
        return []

    return order
```

The time and space complexity for this algorithm are both O(V+E)