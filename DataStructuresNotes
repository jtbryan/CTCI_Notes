# Data Structure Notes

<a href=#arrays-and-strings>Arrays & Strings</a>

<a href=#linked-lists>Linked-Lists</a>

<a href=#stacks-and-queues>Stacks and queues</a>

<a href=#trees>Trees</a>

<a href=#graphs>Graphs</a>

<a href=#heaps>Heaps</a>

## Arrays and Strings

An example of how we can add 1 to an integer array (i.e. [1, 2, 3]) in python with `O(1)` space and `O(n)` time:

```python
def plusOne(self, digits: List[int]) -> List[int]:

    added = int(''.join([str(i) for i in digits]))+1

    return [int(i) for i in [*str(added)]]
```

`[*str(added)]`: unpacks the string and puts it into an array 

## Linked Lists

## Stacks and Queues

### Stacks
Stacks are a type of continer that follow the LIFO (Last in First Out) structure. 

Good resource: https://www.fullstack.cafe/blog/stacks-interview-questions

Python stack:

```python
stack = [1, 2, 3]
last = stack.pop()
```

An important type of stack is a `Monotonic stack`, which is like a regular stack, but the distinction is that during the push operation, we check if the monotonic condition breaks. Which essentially means, we check to see if the value being pushed onto the stack is greater than the top of the stack. For example:

```python
def monotonicStack(nums):
    n = len(nums)
    stack = []
    
    for i in range(n):
        while len(stack) > 0 and stack[-1] >= nums[i]:
            stack.pop()
        
        stack.append(nums[i])
    
    return stack
```

Another example of this is for this leetcode problem: https://leetcode.com/problems/next-greater-element-i/description/

```python
def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
    stack = []
    next_greater = {}
    # reverse nums2 so we can see the previous element
    for num in nums2[::-1]:
        while stack and stack[-1] <= num:
            stack.pop()
        next_greater[num] = stack[-1] if stack else -1
        stack.append(num)
    return [next_greater[num] for num in nums1]
```

### Queues
Queues are a type of continer that follow the FIFO (First in First Out) structure. 

Python queue:

```python
queue = [1, 2, 3]
first = queue.pop(0)
```

OR (faster version):

```python
queue = collections.deque([1, 2, 3])
first = queue.popleft()
```

## Trees

A tree is a special kind of graph data structure that has a `root` node and a `left` and `right` node. I.e.:

```python
class TreeNode:
    self.val = None
    self.right = None
    self.left = None
```

Here are a few ways to traverse trees:

* **Inorder** traversal
```python
...
go_left(root.left)
process_current_root()
go_right(root.right)
...
```
* **Preorder** traversal
```python
...
process_current_root()
go_left(root.left)
go_right(root.right)
...
```
* **Postorder** traversal
```python
...
go_left(root.left)
go_right(root.right)
process_current_root()
...
```
* **Level-order** traversal
```python
...
node = queue.pop(0)
process_current_root(node)
go_left(root.left)
go_right(root.right)
...
```
    
This method is very similar to Preorder traversal, but in this case, if we want to achieve an iterative approach, we can use a queue similar to `BFS`. Instead of graph neighbors, we only care about `node.left` and `node.right` though if they are valid. In this case, we don't need a `visited` set though because we know the binary tree is directed. An example of this can be seen here:

```python
def iterativeLevelOrder(root: TreeNode) -> List[List[int]]:
    if not root:
        return []
    
    queue = [root]
    result = []
    
    while queue:
        level_size = len(queue)
        level_vals = []
        for i in range(level_size):
            node = queue.pop(0)
            level_vals.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
                
        result.append(level_vals)
        
    return result
```

a recursive version of this would be the following:

```python
def recursiveLevelOrder(root: TreeNode) -> List[List[int]]:
    result = []
    def helper(node: TreeNode, level: int):
        if not node:
            return
        if len(result) == level:
            result.append([])
        result[level].append(node.val)
        helper(node.left, level+1)
        helper(node.right, level+1)
    
    helper(root, 0)
    return result
```

There are a few different types of trees with important properties. 

### Binary Tree

Source: https://www.javatpoint.com/binary-tree

This is a type of tree where EVERY parent node has a maximum of two child nodes (i.e. binary meaning 2), or leafs.

<img src=https://static.javatpoint.com/ds/images/binary-tree.png>

A **balanced** binary tree is one in which the height of the left and right subtrees of any node differ by not more than 1. Example:

<img src=https://media.geeksforgeeks.org/wp-content/uploads/tree.jpg>

### Binary Search Tree

Source: https://www.tutorialspoint.com/data_structures_algorithms/binary_search_tree.htm

Similar to a Binary Tree, a binary search tree is one in which each node has a maximum of 2 childrens, or leaves, and the left node is `less` than the root and the right node is `greater` than root. Example:

<img src=https://www.upgrad.com/blog/wp-content/uploads/2021/01/800px-Binary_search_tree.svg_-768x640.png>

Here is a code snippet to determine if a binary tree is balaned:

```python
def isBalanced(self, root: Optional[TreeNode]) -> bool:
        
    if not root:
        return True
    
    def helper(root, level):
        if not root:
            return 0
        left = helper(root.left, level+1)
        right = helper(root.right, level+1)
        if right == -1 or right == -1:
            return -1
        # We have an uneven tree
        if abs(left - right) > 1:
            return -1
        return 1 + max(left, right)
        
    valid = helper(root, 0)
    if valid == -1:
        return False
    else:
        return True
```

### Tries

Good video: https://www.youtube.com/watch?v=kMt9Y5fv4Ug

Tries are a special type of tree that allow us to search for prefixes in words (think autocompletion on google). Building one is quite simple. Here is an example class of a Trie in Python:

```python
class Trie:

    def __init__(self):
        self.root = {}

    def insert(self, word: str) -> None:
        node = self.root
        for character in word:
            if character not in node:
                node[character] = {}
            node = node[character]
        node["word"] = True

    def search(self, word: str) -> bool:
        node = self.root
        for character in word:
            if character not in node:
                return False
            else:
                node = node[character]
        return True if "word" in node else False

    def startsWith(self, prefix: str) -> bool:
        node = self.root
        for character in prefix:
            if character in node:
                node = node[character]
            else:
                return False

        return True
```

In a Trie, we want to maintain a way to determine if a character is the end of a seen word. For example, if we've populate our trie with a dictionary of words, if the word is not complete, then it is simply a prefix of a word at best. We can do this by simply mapping together letters, and the final letter in the map can have some significance to indicate that it is the end of a word (in our case this is the literal word, 'word').

This could also be accomplished simply with a `TrieNode` datastructure as follows:

```python
class TrieNode:
     
    # Trie node class
    def __init__(self):
        self.children = {}
 
        # isEndOfWord is True if node represent the end of the word
        self.isEndOfWord = False
```

The time complexity for a Trie is as follows:

* Insert: 
    * Best: O(1) 
    * Average: O(N)
    * Worst: O(N)
* Delete: 
    * Best: O(1) 
    * Average: O(N)
    * Worst: O(N)
* Search: 
    * Best: O(1) 
    * Average: O(N)
    * Worst: O(N)

### AVL Tree

## Graphs

A graph data structure **(V, E)** consists of the following:
* Vertices **(V)**: A collection of nodes or vertices
* Edges **(E)**: A collection of paths or edges

Fundamental algorithms for graphs include the following:

### **BFS**
This is a graph traversal algorithm that traverses the graph from the nearest node (root node) and explores all unexplored (neighboring) nodes by level. You can consider any node in the graph as a root node when using BFS for traversal

Every vertex of a graph is put into the following categories:
* Visited
* Non-visited

This specific algorithm uses the **Queue** data structure to find the shortest path in a given graph. 

Below is an example of how BFS is performed:

```python
def bfs(graph, root):
    visited = set()
    # If not off limits, we could use collections.deque instead which is faster
    queue = []

    visited.add(root)
    queue.append(root)

    while queue:
        # If this was deqeue, we would use popleft()
        # a list popping the first is O(n) whereas deque is O(1)
        vertex = queue.pop(0)

        # Perform opetation at this node

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
bfs(graph, 0)
```

### **DFS**
The depth-first search algorithm starts the traversal from the initial node of a given graph and goes deeper until we find the target node or the leaf node (with no children). DFS then backtracks from the leaf node towards the most recent node to explore it.

This specific algorithm uses the **Stack** data structure to find the shortest path in a given graph. 

Below is an example of how DFS is performed recursively:

```python
def recursiveDfs(graph, node, visited=None):
    if visited = None:
        visited = set()
    if node not in visited:
        # do stuff
        visited.add(node)
        for neighbor in graph[node]:
            dfs(graph, neighbor, visited)

graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
dfs(graph, 0)
```

And this is how it can be perfroemd iteratively (essentially similar to bfs but instead we use the stack):

```python
def iterativeDfs(graph, node, visited=None):
    if visited = None:
        visited = set()
    stack = []

    visited.add(root)
    stack.append(root)

    while stack:
        vertex = stack.pop()

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                stack.append(neighbor)

graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
dfs(graph, 0)
```

### Example problem using DFS

Source: https://leetcode.com/problems/number-of-islands/

Prompt: Given an m x n 2D binary grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

```python
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        rows = len(grid)
        cols = len(grid[0])

        if rows == 0 or cols == 0:
            return 0
        
        def dfs(curRow, curCol):
            if curRow < 0 or curRow == rows or curCol < 0 or curCol == cols:
                return

            if grid[curRow][curCol] == "1":
                grid[curRow][curCol] = "V"
            
            else:
                return

            dfs(curRow-1, curCol)
            dfs(curRow+1, curCol)
            dfs(curRow, curCol-1)
            dfs(curRow, curCol+1)

        count = 0

        for row in range(rows):
            for col in range(cols):
                if grid[row][col] == "1":
                    count += 1
                    dfs(row, col)

        return count
```

## Maps/Dictionaries

### Time Complexity

* **Insert**
    * Average: **O(1)**
    * Worst: **O(n)**

* **Get**
    * Average: **O(1)**
    * Worst: **O(n)**

* **Delete**
    * Average: **O(1)**
    * Worst: **O(n)**
### Example

```python
mapping = dict()

# Update/Set 
mapping["key"] = mapping.get("key", 0) + 1

# Loop
for key in mapping:
    mapping[key] = ?

# Delete
mapping.pop('key', None)

# OR

del mapping['key'] # if it definitely exists

# Creating a dynamic map
numbers = (1, 2, 3, 4)
mapping = map(lambda x: x + x, numbers)
```
## Heaps

Heaps are very similar to trees.
There are 2 forms for heaps, `min heap` and `max heap`

### Min Heap

The top of the "tree" is always the minimum value in the heap. When the top element is removed (i.e. the minimum element), the last element added is moved to the top and appropriately shifted down the tree, swapping places with values along the way to replace the minimum.  As such, every single parent node including the root node is less than or equal to the value of it's children nodes. 

Here is a basic implementation of a min heap in Python:

```python
import heapq
listForTree = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]    
heapq.heapify(listForTree) # initialize a min heap

heapq.heappop(listForTree) # pop off the min
```

### Max Heap

The top of the "tree" is always the maximum value in the heap. When the top element is removed (i.e. the maximum element), the last element added is moved to the top and appropriately shifted down the tree, swapping places with values along the way to replace the maximum.  As such, every single parent node including the root node is greater than or equal to the value of it's children nodes. 

Here is a basic implementation of a max heap in Python:

```python
import heapq
listForTree = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]  

listForTree = [-i for i in listForTree] # set all values to negative

heapq.heapify(listForTree) # initialize a min heap

heapq.heappop(listForTree) # pop off the min
```

### Priority Queues

The difference between a priority queue and heapq is that `heapq` is NOT thread safe, while priority queue is. 

The PriorityQueue module in python actually utilizes the heapq module. Here is how we could use it though:

```python
from queue import PriorityQueue
customers = PriorityQueue() #we initialise the PQ class instead of using a function to operate upon a list. 
customers.put((2, "Harry"))
customers.put((3, "Charles"))
customers.put((1, "Riya"))
customers.put((4, "Stacy"))
while customers:
     print(customers.get())
```